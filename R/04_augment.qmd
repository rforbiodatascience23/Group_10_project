---
title: "Augment data"
format: html
editor: visual
---

## Loading libraries

```{r}
library(tidyverse)
library(dplyr)
library(broom)
library(purrr)
```

## Loading data

```{r}
cancer_dataset_clean <- read_tsv('/path/to/R/02_dat_clean_binary.tsv')
```

## Linear regression analysis

```{r}
# Creating long version of the dataset, so it's possible to group variables
cancer_dataset_clean_aug_long_nested <- cancer_dataset_clean |> 
  pivot_longer(cols = contains(c('mean', 'worst', 'se')),
               names_to = "variables",
               values_to = "values") |>
  group_by(variables) |>
  nest() |>
  ungroup()
```

## Making linear model

We group to ensure we are working per variable and add model object that will be calculated based on each variable.

```{r}
cancer_dataset_clean_aug_long_nested <- cancer_dataset_clean_aug_long_nested |> 
  group_by(variables) |> 
  mutate(model_object = map(.x = data,
                   .f = ~lm(formula = values ~ diagnosis,
                            data = .x)))

# We map the tidy function to the model object variable
cancer_dataset_clean_aug_long_nested <- cancer_dataset_clean_aug_long_nested |> 
  mutate(model_object_tidy = map(.x = model_object,
                                 .f = ~tidy(x = .x,
                                            conf.int = TRUE,
                                            conf.level = 0.95)))

```

## Unnesting model

Unnesting the model to reveal all values. Then we select what we want to see, and ungroup the data. We can also add an informational column that reveals if the variable is significant or not.

```{r}
cancer_estimates <- cancer_dataset_clean_aug_long_nested |>
  unnest(model_object_tidy)


cancer_estimates <- cancer_estimates |> 
  filter(term == "diagnosis") |> 
  select(variables, p.value, estimate, conf.low, conf.high) |> 
  ungroup()

```

## Adding columns for significance

```{r}
cancer_estimates <- cancer_estimates |>
  mutate(q.value = p.adjust(p.value),
         is_significant = case_when(q.value <= 0.05 ~ "yes",
                                    q.value > 0.05 ~ "no")) |>
  write_tsv(file = "/path/to/R/03_dat_aug.tsv")
```

## Plotting forest plot

```{r}
pl <- cancer_estimates |> 
  filter(is_significant == "yes") |> 
  ggplot(aes(x = estimate,
             y = fct_reorder(variables, estimate),
             xmin = conf.low,
             xmax = conf.high)) +
  geom_vline(xintercept = 0) +
  geom_errorbarh() +
  geom_point() +
  theme_minimal(base_size = 16) +
  theme(plot.title = element_text(hjust = 1)) +
  labs(x = "Estimates (95%CIs)",
       y = "",
       title = "Parameters associated with breast cancer")

# Save the ggplot as a PNG file in the specified folder
folder_path <- "/path/to/results"
file_name <- "forest_plot.png"

ggsave(file.path(folder_path, file_name), pl, width = 8, height = 6, dpi = 300)

```
