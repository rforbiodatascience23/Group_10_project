```{r}
library(tidyverse)
library(dplyr)
library(broom)
library(purrr)
cancer_dataset_clean <- read_tsv('/net/pupil1/home/people/s194681/projects/Group_project_10/02_dat_clean.tsv')

```

Linear regression analysis


Creating long version of the dataset, so it's possible to group variables. dplyt pipeline: Variables are grouped, nested and ungrouped. 
```{r}
cancer_dataset_clean_aug_long <- cancer_dataset_clean |> 
  pivot_longer(cols = contains(c('mean', 'worst', 'se')),
               names_to = "variables",
               values_to = "values") 

cancer_dataset_clean_aug_long_nested <- cancer_dataset_clean_aug_long |>
  group_by(variables) |>
  nest() |>
  ungroup()

cancer_dataset_clean_aug_long 
```


We group to ensure we are working per variable and add model object that will be calculated based on each variable

```{r}
cancer_dataset_clean_aug_long_nested <- cancer_dataset_clean_aug_long_nested |> 
  group_by(variables) |> 
  mutate(model_object = map(.x = data,
                   .f = ~lm(formula = values ~ diagnosis,
                            data = .x)))
cancer_dataset_clean_aug_long_nested
```


We map the tidy function to the model object variable
```{r}

cancer_dataset_clean_aug_long_nested <- cancer_dataset_clean_aug_long_nested |> 
  mutate(model_object_tidy = map(.x = model_object,
                                 .f = ~tidy(x = .x,
                                            conf.int = TRUE,
                                            conf.level = 0.95)))

cancer_dataset_clean_aug_long_nested
```

Unnesting the model to reveal all values. Then we select what we want to see, and ungroup the data. We can also add an informational column that reveals if the variable is significant or not.
```{r}
cancer_estimates <- cancer_dataset_clean_aug_long_nested |>
  unnest(model_object_tidy)


cancer_estimates <- cancer_estimates |> 
  filter(term == "diagnosis") |> 
  select(variables, p.value, estimate, conf.low, conf.high) |> 
  ungroup()



cancer_estimates <- cancer_estimates |>
  mutate(q.value = p.adjust(p.value),
         is_significant = case_when(q.value <= 0.05 ~ "yes",
                                    q.value > 0.05 ~ "no"))
cancer_estimates

   

```










