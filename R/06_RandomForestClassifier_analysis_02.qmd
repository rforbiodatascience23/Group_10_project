---
title: "RandomForestClassifier"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(purrr)
if (!require(randomForest)) {
  install.packages(randomForest)
}
library(randomForest)
```

## Data Preparation

```{r}
# Assuming you have a data frame called cancer_data_clean
data_folder <- '~/Desktop/'
cancer_data_clean <- read_tsv(paste0(data_folder,'02_dat_clean.tsv'))
# Display unique values in the 'diagnosis' column
cancer_data_clean <- cancer_data_clean |>
  rename_with(~ gsub(" ", "_", .), everything()) |>
  mutate(diagnosis = as.factor(diagnosis))
```

## Random Forest Classifier

```{r}
set.seed(124)

# Set up 5-fold cross-validation
n <- nrow(cancer_data_clean)
indices <- sample(n)
k <- 5

# Create folds
fold_sizes <- rep(n %/% k, k)
fold_sizes[1:(n %% k)] <- fold_sizes[1:(n %% k)] + 1
folds <- tibble(indices = indices) |>
  mutate(fold = rep(seq_len(k), fold_sizes))

# Function to perform cross-validation and calculate ROC metrics
process_fold <- function(fold_id, data, folds) {
  test_indices <- filter(folds, fold == fold_id) |> pull(indices)
  train_indices <- filter(folds, fold != fold_id) |> pull(indices)
  
  trainData <- slice(data, train_indices)
  testData <- slice(data, test_indices)
  
  model <- randomForest(diagnosis ~ ., data = trainData)
  pred_probs <- predict(model, testData, type = "prob")
  
  # Function to compute TPR and FPR for each threshold
  compute_roc_metrics <- function(threshold) {
    predicted_class <- ifelse(pred_probs[, 'M'] > threshold, 'M', 'B')
    cm <- table(Predicted = predicted_class, Actual = testData$diagnosis)
    
    tpr <- ifelse("M" %in% rownames(cm) && "M" %in% colnames(cm), cm['M', 'M'] / sum(cm[, 'M']), 0)
    fpr <- ifelse("M" %in% rownames(cm) && "B" %in% colnames(cm), cm['M', 'B'] / sum(cm[, 'B']), 0)
    
    tibble(FPR = fpr, TPR = tpr, Threshold = threshold, Fold = fold_id)
  }
  
  # Apply compute_roc_metrics function over each threshold
  roc_data_fold <- map_dfr(seq(0, 1, by = 0.01), compute_roc_metrics)
  return(roc_data_fold)
}

# Apply process_fold function over each fold and combine results
roc_data <- map_dfr(seq_len(k), ~process_fold(.x, cancer_data_clean, folds))
```

## Visualize the performance

```{r}
# Plot ROC curve using ggplot2
roc_plot <- ggplot(roc_data, aes(x = FPR, 
                                 y = TPR, 
                                 group = as.factor(Fold), 
                                 color = as.factor(Fold))) +
  
  geom_line(na.rm = TRUE, linewidth = 1, alpha = 0.9) +
  
  scale_color_brewer(palette="Paired") +
  
  geom_abline(slope = 1, intercept = 0, linetype = "dashed",alpha = 0.5) +
  
  labs(title = "ROC Curve of Random Forest Classifier", x = "False Positive Rate", y = "True Positive Rate", color = "Fold") +
  
  theme_minimal()

# Display summary of roc_data
summary(roc_data)
roc_plot
ggsave('~/Desktop/Group_10_project/results/roc_curve.png')
```
